#version 450

layout (local_size_x = 256) in;


struct InputVertex {
    uint id;
    uint state;
    float r;
    float g;
    float b;
    float a;
    uint data[4];
};

struct OutputVertex {
    vec4 vertex;
    vec4 color;
};

struct ParticleInfo {
    vec4 materialColor;
};


layout (set = 0, binding = 0) readonly buffer InputData {
    InputVertex[] data;
} inputData;

layout (set = 0, binding = 1) uniform InputDataInfo {
    ivec3 dimensions;
} inputInfo;

layout (set = 0, binding = 2) buffer OutputMesh {
    OutputVertex[] data;
} mesh;

layout (set = 0, binding = 3) readonly buffer ParticleDataBuffer {
    ParticleInfo[] data;
} particleData;

vec3 blend(vec3 a, vec3 b, float blendAmount) {
    return a*(1.0-blendAmount)+b*blendAmount;
}

void main() {
    uint outputPos = gl_GlobalInvocationID.x*6;
    uint xPos = gl_GlobalInvocationID.x%inputInfo.dimensions.x;
    uint yPos = gl_GlobalInvocationID.x/inputInfo.dimensions.x%inputInfo.dimensions.y;
    uint zPos = gl_GlobalInvocationID.x/inputInfo.dimensions.x/inputInfo.dimensions.y%inputInfo.dimensions.z;

    float w = -1.0;
    InputVertex inVert = inputData.data[gl_GlobalInvocationID.x];
    if((inVert.id&0xFFFF) > 0) {
        w = 1.0;
        for(int i = 0; i < 6; i++) 
            mesh.data[outputPos+i].color = vec4(blend(
                    particleData.data[inVert.id-1].materialColor.xyz,
                    vec3(inVert.r, inVert.g, inVert.b),
                    inVert.a),
                particleData.data[inVert.id-1].materialColor.w);//vec4(particleData.data[inVert.id-1].materialColor.xyz*(1.0-inVert.paintColor.w) + inVert.paintColor.xyz*inVert.paintColor.w, particleData.data[inVert.id-1].materialColor.w);
    }

    mesh.data[outputPos+0].vertex = vec4(vec3(-0.5, -0.5, 0.0)+vec3(xPos, yPos, 0), w);
    mesh.data[outputPos+1].vertex = vec4(vec3(-0.5,  0.5, 0.0)+vec3(xPos, yPos, 0), w);
    mesh.data[outputPos+2].vertex = vec4(vec3( 0.5, -0.5, 0.0)+vec3(xPos, yPos, 0), w);
    mesh.data[outputPos+3].vertex = vec4(vec3( 0.5, -0.5, 0.0)+vec3(xPos, yPos, 0), w);
    mesh.data[outputPos+4].vertex = vec4(vec3(-0.5,  0.5, 0.0)+vec3(xPos, yPos, 0), w);
    mesh.data[outputPos+5].vertex = vec4(vec3( 0.5,  0.5, 0.0)+vec3(xPos, yPos, 0), w);
}
